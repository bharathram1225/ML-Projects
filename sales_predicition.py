# -*- coding: utf-8 -*-
"""sales predicition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k0eOef48vlVpNNCfi6TYP7cI57__2v0G
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

big_mart_data = pd.read_csv("/content/Train.csv")

big_mart_data.head()

"""rows  - data points and columns - data features"""

big_mart_data.shape

"""get some information of thi data set"""

big_mart_data.info()

big_mart_data.isnull().sum()

"""handling missing values 

mean - item weight for numerical data
mode  - outlet_size for categorial data
"""

big_mart_data["Item_Weight"].mean()

"""# filling the item weight value with the mean value."""

big_mart_data["Item_Weight"].fillna(big_mart_data["Item_Weight"].mean(), inplace=True)

big_mart_data.isnull().sum()

big_mart_data["Outlet_Size"].mode()

"""replace the outlet size column with mode"""

mode_of_outlet = big_mart_data.pivot_table(values="Outlet_Size", columns="Outlet_Type",aggfunc=(lambda x: x.mode()[0]))

print(mode_of_outlet)

missing_values=big_mart_data["Outlet_Size"].isnull()

print(missing_values)

big_mart_data.loc[missing_values, 'Outlet_Size'] = big_mart_data.loc[missing_values,'Outlet_Type'].apply(lambda x: mode_of_outlet[x])

big_mart_data.isnull().sum()

"""data analysis"""



big_mart_data.head()

big_mart_data.describe()

"""numerical features"""

sns.set()

plt.figure(figsize=(6,6))
sns.countplot(big_mart_data["Outlet_Size"])
plt.show()

plt.figure(figsize=(6,6))
sns.distplot(big_mart_data["Item_Weight"])
plt.show()

plt.figure(figsize=(6,6))
sns.distplot(big_mart_data["Item_Visibility"])
plt.show()

plt.figure(figsize=(6,6))
sns.distplot(big_mart_data["Item_MRP"])
plt.show()

plt.figure(figsize=(6,6))
sns.distplot(big_mart_data["Outlet_Establishment_Year"])
plt.show()

plt.figure(figsize=(6,6))
sns.distplot(big_mart_data["Item_Outlet_Sales"])
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x="Outlet_Establishment_Year", data=big_mart_data)
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x="Item_Fat_Content", data=big_mart_data)
plt.show()

plt.figure(figsize=(30,6))
sns.countplot(x="Item_Type", data=big_mart_data)
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x="Outlet_Location_Type",data=big_mart_data)
plt.show()

"""data pre-processing - converting categorical data into """

big_mart_data.head()

big_mart_data["Item_Fat_Content"].value_counts()

big_mart_data.replace({"Item_Fat_Content": {'LF':'low fat', 'reg': 'Regular' , 'Low Fat': 'low fat'}},inplace = True)

big_mart_data["Item_Fat_Content"].value_counts()

"""label encoding"""

encorder = LabelEncoder()

big_mart_data['Item_Identifier'] = encorder.fit_transform(big_mart_data['Item_Identifier'])

big_mart_data['Item_Fat_Content'] = encorder.fit_transform(big_mart_data['Item_Fat_Content'])

big_mart_data["Item_Type"] = encorder.fit_transform(big_mart_data["Item_Type"])

big_mart_data["Outlet_Identifier"] = encorder.fit_transform(big_mart_data["Outlet_Identifier"])



big_mart_data["Outlet_Location_Type"] = encorder.fit_transform(big_mart_data["Outlet_Location_Type"])

big_mart_data["Outlet_Type"] = encorder.fit_transform(big_mart_data["Outlet_Type"])

big_mart_data["Outlet_Size"] = encorder.fit_transform(big_mart_data["Outlet_Size"])

big_mart_data.head()

"""splting the features and target 

"""

x = big_mart_data.drop(columns="Item_Outlet_Sales", axis=1)
y = big_mart_data["Item_Outlet_Sales"]

print(x)

print(y)

"""Spliting the data into training data and testing data"""

x_training, x_testing, y_training, y_testing = train_test_split(x,y, test_size=0.2, random_state =2)

print(x.shape, x_training.shape, x_testing.shape)

"""Machine learing model training """

regressor = XGBRegressor()

regressor.fit(x_training, y_training)

"""evaluate the model """

#predicition on the training data 

training_data_predicition = regressor.predict(x_training)

# R Square value range of these value is 0  - 1
r2_training = metrics.r2_score(y_training, training_data_predicition)

print("R Squared value = ", r2_training)

#predicition on the testing data 

training_data_predicition = regressor.predict(x_testing)

# R Square value range of these value is 0  - 1
r2_training = metrics.r2_score(y_testing, training_data_predicition)

print("R Squared value for testing data set = ", r2_training)

